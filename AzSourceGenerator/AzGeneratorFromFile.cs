using Microsoft.CodeAnalysis.Text;
using Microsoft.CodeAnalysis;
using System.CodeDom.Compiler;
using System.Globalization;
using System.IO;
using System;
using System.Collections.Generic;

namespace AzSourceGeneratorTest;

[Generator(LanguageNames.CSharp)]
internal sealed class AzGeneratorFromFile : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        IncrementalValueProvider<Config> configProvider =
                context.AnalyzerConfigOptionsProvider.Select((provider, _) =>
                {
                    provider.GlobalOptions.TryGetValue("build_property.FieldSourceGeneratorNamespace", out var ns);
                    provider.GlobalOptions.TryGetValue("build_property.FieldSourceGeneratorExtensionFilePattern", out var pattern);
                    return new Config(ns ?? "Models", pattern ?? ".csv");
                });

        IncrementalValuesProvider<(AdditionalText, Config)> combinedProvider =
            context.AdditionalTextsProvider.Combine(configProvider);

        context.RegisterSourceOutput(combinedProvider, (spc, source) =>
            Execute(spc, source.Item1, source.Item2));
    }

    private static CsvFile? GetColumns(AdditionalText additionalText)
    {
        SourceText? text = additionalText.GetText();
        if (text is null) return null;

        var className = Path.GetFileNameWithoutExtension(additionalText.Path);
        var rows = text.ToString().Split('\n');
        if (rows.Length == 0) return null;

        return new CsvFile
        {
            ClassName = className,
            Rows = rows
        };
    }

    private static void Execute(SourceProductionContext context,
            AdditionalText file, Config config)
    {
        // if (!Debugger.IsAttached) Debugger.Launch();
        var ext = Path.GetExtension(file.Path);
        if (ext != config.Extension) return;

        var csvFile = GetColumns(file);
        if (csvFile is null) return;

        using StringWriter writer = new(CultureInfo.InvariantCulture);
        using IndentedTextWriter text = new(writer);

        text.WriteLine("// <auto-generated/>");
        text.WriteLine("#nullable enable");
        text.WriteLine();
        text.WriteLine($"namespace {config.Namespace};");
        text.WriteLine();
        text.WriteLine($@"[global::System.CodeDom.Compiler.GeneratedCode(""{typeof(AzGeneratorFromAttribute).Assembly.GetName().Name}"", ""{DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}"")]");
        text.WriteLine($"public sealed class {csvFile.ClassName}");
        text.WriteLine("{");
        text.Indent++;

        List<string> fieldList = [];
        foreach (var row in csvFile.Rows)
        {
            var columns = row.Split(',');
            if (columns.Length != 2) continue;
            fieldList.Add(columns[0]);
            text.WriteLine(columns switch
            {
                var c when c[1].StartsWith("varchar") => $"public string {c[0]} {{ get; set; }} = null!;",
                var c when c[1].StartsWith("int") => $"public int {c[0]} {{ get; set; }}",
                var c when c[1].StartsWith("decimal") => $"public double {c[0]} {{ get; set; }}",
                _ => string.Empty
            });
        }

        text.WriteLine();
        text.WriteLine("public override string ToString()");
        text.WriteLine("{");
        text.Indent++;
        text.Write("return $\"");
        foreach (var field in fieldList)
        {
            text.Write($"{{{field}}} ");
        }
        text.WriteLine("\";");
        text.Indent--;
        text.WriteLine("}");
        text.Indent--;
        text.WriteLine("}");

        context.AddSource($"{csvFile.ClassName}.g.cs", writer.ToString());
    }
}