using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Text;
using System.Linq;

namespace AzSourceGeneratorTest;

[Generator(LanguageNames.CSharp)]
internal sealed class AzGeneratorPartial : IIncrementalGenerator
{
    private static readonly string generatedCodeAttribute = $@"[global::System.CodeDom.Compiler.GeneratedCodeAttribute(""{typeof(AzGeneratorPartial).Assembly.GetName().Name}"", ""{typeof(AzGeneratorPartial).Assembly.GetName().Version}"")]";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        //if (!System.Diagnostics.Debugger.IsAttached) System.Diagnostics.Debugger.Launch();
        context.RegisterPostInitializationOutput(static void (IncrementalGeneratorPostInitializationContext context) =>
        {
            {
                const string hintName = "AzGeneratorPartial.PartialExample.g.cs";
                //language=c#
                string source = $$"""
                // <auto-generated/>
                #nullable enable
                using System;
                namespace AzGeneratorPartial;

                public static partial class PartialExample
                {
                	public static T get<T>() where T:class,new()
                	{
                		MyClass<T> q = new();
                		return q.GetClass();
                	}

                	partial class MyClass<T> where T:class,new()
                	{
                		T? o;
                		public T GetClass()
                		{
                			save();
                			return o!;
                		}

                		partial void save();
                	}
                }
                """;

                context.AddSource(hintName, source);
            }
        });

        var methodUsages = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: (node, _) => node is InvocationExpressionSyntax,
                transform: (ctx, _) => GetMethodInvocationSymbol((InvocationExpressionSyntax)ctx.Node, ctx.SemanticModel))
            .Where(symbol => symbol is not null)
            .Collect();

        // Code generation
        context.RegisterSourceOutput(methodUsages, (ctx, methodSymbols) =>
        {
            //language=c#
            string sources = $$"""
                // <auto-generated/>
                #nullable enable
                using System;
                namespace AzGeneratorPartial;

                public static partial class PartialExample
                {
                	partial class MyClass<T> where T:class,new()
                	{
                		partial void save()
                		{

                """;
            string sourcee = $$"""
                   		}
                	}
                }
                """;

            StringBuilder sb = new();
            foreach (var getMethod in methodSymbols)
            {
                ITypeSymbol genericTypeArgument = getMethod!.TypeArguments.First();

                var className = genericTypeArgument.Name;

                string namespacex = string.Empty;
                var namespaceSymbol = genericTypeArgument.ContainingNamespace;

                if (namespaceSymbol != null && !namespaceSymbol.IsGlobalNamespace)
                {
                    namespacex = namespaceSymbol.ToDisplayString();
                }

                if (!string.IsNullOrEmpty(namespacex)) namespacex += ".";

                var properties = genericTypeArgument.GetMembers().OfType<IPropertySymbol>().ToList();
                foreach (var property in properties)
                {
                    //Console.WriteLine($"Property: {property.Name}, Type: {property.Type}");
                }

                if (methodSymbols.Length == 1)
                {
                    sb.Append($$"""
                                    o = new {{namespacex}}{{className}}() as T;

                        """);
                }
                else
                {
                    sb.Append($$"""
                                    if (typeof(T) == typeof({{namespacex}}{{className}}))
                                    {
                                        o = new {{namespacex}}{{className}}() as T;
                                        return;
                                    }

                        """);
                }
            }

            ctx.AddSource($"AzGeneratorPartial.PartialCreatedCode.g.cs", sources + sb.ToString() + sourcee);
        });
    }

    private static IMethodSymbol? GetMethodInvocationSymbol(InvocationExpressionSyntax invocationSyntax, SemanticModel semanticModel)
    {
        var symbolInfo = semanticModel.GetSymbolInfo(invocationSyntax);

        if (symbolInfo.Symbol is IMethodSymbol methodSymbol)
        {
            var containingNamespace = methodSymbol.ContainingNamespace.ToString();

            if (
                containingNamespace == "AzGeneratorPartial"
                && methodSymbol.ContainingType.Name == "PartialExample"
                && methodSymbol.Name == "get"
                && methodSymbol.IsStatic
                && methodSymbol.IsGenericMethod
                )
            {
                return methodSymbol;
            }
        }

        return null;
    }
}